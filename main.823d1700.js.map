{"version":3,"sources":["scripts/main.js"],"names":["tableHead","document","body","querySelector","tableBody","addEventListener","e","colNum","arrOfColumns","lastElementChild","children","i","length","target","employeesHtml","employeesArr","sort","pers1","pers2","p1Arr","p2Arr","p1Salary","textContent","slice","split","join","p2Salary","isNaN","parseFloat","localeCompare","Number","forEach","row","innerHTML"],"mappings":";AAAA,aAKA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAHA,IAAMA,EAAYC,SAASC,KAAKC,cAAc,SACxCC,EAAYH,SAASC,KAAKC,cAAc,SAE9CF,SAASI,iBAAiB,QAAS,SAACC,GAI7B,IAHDC,IAAAA,EACEC,EAAoBR,EAAAA,EAAUS,iBAAiBC,UAE5CC,EAAI,EAAGA,EAAIH,EAAaI,OAAQD,IACnCL,EAAEO,SAAWL,EAAaG,KAC5BJ,EAASI,GAITG,IAAAA,EAAgB,GAEdC,EAAoBX,EAAAA,EAAUM,UAEpCK,EAAaC,KAAK,SAACC,EAAOC,GAClBC,IAAAA,EAAaF,EAAAA,EAAMP,UACnBU,EAAaF,EAAAA,EAAMR,UAEnBW,EAAWF,EAAMZ,GAAQe,YAAYC,MAAM,GAAGC,MAAM,KAAKC,KAAK,IAC9DC,EAAWN,EAAMb,GAAQe,YAAYC,MAAM,GAAGC,MAAM,KAAKC,KAAK,IAEhE,OAACE,MAAMC,WAAWT,EAAMZ,KAGhBoB,MAAMC,WAAWP,IAIpBF,EAAMZ,GAAQe,YAAYO,cAAcT,EAAMb,GAAQe,aAHtDQ,OAAOT,GACVS,OAAOJ,GAJJI,OAAOX,EAAMZ,GAAQe,aACxBQ,OAAOV,EAAMb,GAAQe,eAS7BP,EAAagB,QAAQ,SAAAC,GACnBlB,GAEMkB,yBAAAA,OAAAA,EAAIC,UAFV,yBAOF7B,EAAU6B,UAAYnB","file":"main.823d1700.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst tableHead = document.body.querySelector('thead');\nconst tableBody = document.body.querySelector('tbody');\n\ndocument.addEventListener('click', (e) => {\n  let colNum;\n  const arrOfColumns = [ ...tableHead.lastElementChild.children ];\n\n  for (let i = 0; i < arrOfColumns.length; i++) {\n    if (e.target === arrOfColumns[i]) {\n      colNum = i;\n    }\n  }\n\n  let employeesHtml = '';\n\n  const employeesArr = [ ...tableBody.children ];\n\n  employeesArr.sort((pers1, pers2) => {\n    const p1Arr = [ ...pers1.children ];\n    const p2Arr = [ ...pers2.children ];\n\n    const p1Salary = p1Arr[colNum].textContent.slice(1).split(',').join('');\n    const p2Salary = p2Arr[colNum].textContent.slice(1).split(',').join('');\n\n    if (!isNaN(parseFloat(p1Arr[colNum]))) {\n      return Number(p1Arr[colNum].textContent)\n        - Number(p2Arr[colNum].textContent);\n    } else if (!isNaN(parseFloat(p1Salary))) {\n      return Number(p1Salary)\n        - Number(p2Salary);\n    } else {\n      return p1Arr[colNum].textContent.localeCompare(p2Arr[colNum].textContent);\n    }\n  });\n\n  employeesArr.forEach(row => {\n    employeesHtml += `\n      <tr>\n        ${row.innerHTML}\n      </tr>\n    `;\n  });\n\n  tableBody.innerHTML = employeesHtml;\n});\n"]}